buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'

group = 'Windows2000'
version = '1.1.30-ArrayIndexOutOfBoundsException-Fix-3'

java {
    archivesBaseName = 'GregTechNimosesEditionCore'
    toolchain.languageVersion = JavaLanguageVersion.of(8)
}

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'stable', version: '39-1.12'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'


            mods {
                gregtechnimoseseditioncore {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'


            mods {
                gregtechnimoseseditioncore {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = 'Cleanroom Maven'
        url = 'https://maven.cleanroommc.com'
    }
    maven {
        name = 'Sponge Powered'
        url = 'https://repo.spongepowered.org/maven'
    }
    maven {
        name = 'Mod Maven'
        url = 'https://modmaven.dev'
    }
    maven {
        name = 'Curse Maven'
        url = 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'src/api/java']
        }

        resources {
            srcDirs = ['src/main/resources']
        }

    }
    main.output.setResourcesDir(main.java.classesDirectory)
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2854'
    implementation fg.deobf("curse.maven:codechicken-lib-1-8-242818:2779848")
    implementation fg.deobf("curse.maven:cofh-world-271384:2920434")
    implementation fg.deobf("curse.maven:cofh-core-69162:2920433")
    implementation fg.deobf("curse.maven:gregtech-557242:4483462")
    implementation fg.deobf("curse.maven:thermal-foundation-222880:2926428")
    implementation fg.deobf("curse.maven:gregicality-multiblocks-564858:4483468")
    implementation fg.deobf("curse.maven:enderio-${eio_pid}:${eio_fid}")
    implementation fg.deobf("curse.maven:endercore-${eco_pid}:${eco_fid}")
    implementation files("libs/groovyscript-0.4.0.jar")
    // Medium Dependencies
    implementation "curse.maven:crafttweaker-239197:4403410"
    implementation fg.deobf("curse.maven:jei-238222:3040523")
    implementation fg.deobf("curse.maven:ctm-267602:2915363")
    implementation fg.deobf("curse.maven:gregtech-food-option-477021:4480325")
    implementation fg.deobf("curse.maven:draconic-evolution-223565:3431261")
    implementation fg.deobf("curse.maven:brandons-core-231382:3408276")
    implementation fg.deobf("curse.maven:draconicadditions-314515:3514704")
    implementation fg.deobf("curse.maven:avaritia-1-10-261348:3143349")
    // Tests
    testImplementation("org.junit.jupiter:junit-jupiter:${junit_version}")
    testImplementation("org.hamcrest:hamcrest:${hamcrest_version}")

    // Compile-Time Dependencies
    compileOnly "org.projectlombok:lombok:${lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${lombok_version}"
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

processJarTask jar

private void processJarTask(task) {
    task.configure {
        file('src/api/').eachDirRecurse { dir ->
            exclude dir.name
        }
    }
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "gregtechnimoseseditioncore",
                //"Specification-Vendor": "gregtechnimoseseditioncore authors",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                //"Implementation-Vendor": "gregtechnimoseseditioncore authors",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

@SuppressWarnings('GroovyAssignabilityCheck')
private String getGTNEVersionFile(boolean addExtra) {
    def major = '0'
    def minor = '0'
    def revision = '0'
    def extra = ''

    file('src/main/java/gtne/GTNEVersion.java').readLines().each { line ->
        if (line.contains('MAJOR')) {
            def matcher = line =~ /MAJOR\s*=\s*(\d+)/
            if (matcher) major = matcher[0][1]
        } else if (line.contains('MINOR')) {
            def matcher = line =~ /MINOR\s*=\s*(\d+)/
            if (matcher) minor = matcher[0][1]
        } else if (line.contains('REVISION')) {
            def matcher = line =~ /REVISION\s*=\s*(\d+)/
            if (matcher) revision = matcher[0][1]
        } else if (line.contains('EXTRA')) {
            def matcher = line =~ /EXTRA\s*=\s*"(\w+)"/
            if (matcher) extra = matcher[0][1]
            return
        }
    }

    if (addExtra && extra) {
        return "${major}.${minor}.${revision}-${extra}"
    }  else {
        return "${major}.${minor}.${revision}"
    }
}

jar.finalizedBy('reobfJar')